public class Lab2 { //оголошення класу Lab2, який містить всі методи.

    // Метод для виведення центрованої ялинки
    public static void drawCenteredTree(int levels) { //оголошення методу drawCenteredTree, який виводить на екран ялинку з центру. Він приймає один параметр levels – кількість рівнів ялинки.
        for (int i = 1; i <= levels; i++) { //цикл, який повторюється levels раз. Змінна i починається з 1 і збільшується на кожній ітерації. Вона вказує поточний рівень ялинки. Наприклад, на 1-му рівні виводиться 1 зірочка, на 2-му – 3 зірочки і так далі.
            // Друкуємо пробіли перед зірочками
            for (int j = 0; j < levels - i; j++) { //внутрішній цикл, який відповідає за друк пробілів перед зірочками. Кількість пробілів на кожному рівні визначається як levels - i. Чим менше рівень i, тим більше пробілів, щоб центр ялинки залишався в одному місці.
                System.out.print(" "); //друкує один пробіл. Використовується в кожній ітерації внутрішнього циклу для виведення необхідної кількості пробілів.
            }
            // Друкуємо зірочки
            for (int j = 0; j < 2 * i - 1; j++) { //внутрішній цикл, який виводить зірочки. Кількість зірочок на кожному рівні визначається за формулою 2 * i - 1, що дозволяє збільшувати кількість зірочок на 2 на кожному рівні. Наприклад, на 1-му рівні виводиться 1 зірочка, на 2-му – 3 зірочки, на 3-му – 5 і так далі.
                System.out.print("*"); //друкує символ * (зірочку) без переносу на новий рядок. Використовується для відображення всіх зірочок в одному рядку.
            }
            // Переходимо на новий рядок після кожного рівня
            System.out.println(); //після того як надруковані всі пробіли та зірочки для поточного рівня, цей виклик переносить курсор на новий рядок, щоб на наступній ітерації зірочки і пробіли починались з нового рядка.
        }
    }
    //Закриття циклів і методу drawCenteredTree. Після виконання всіх циклів ялинка буде виведена на екран.
    // Метод для створення та виведення двовимірного масиву
    public static void generateArray(int rows, int cols) { //оголошення методу generateArray, який створює та виводить двовимірний масив. Він приймає два параметри: rows (кількість рядків) та cols (кількість колонок).
        int[][] array = new int[rows][cols]; //Створення двовимірного масиву цілих чисел розміром rows на cols.
        int value = 1; //оголошення змінної value, яка буде зберігати значення для кожного елемента масиву. Початкове значення – 1.
        
        for (int i = 0; i < rows; i++) { //цикл, який проходить через кожен рядок масиву. i змінюється від 0 до rows - 1.
            for (int j = 0; j < cols; j++) { //внутрішній цикл, який проходить через кожну колонку поточного рядка масиву. j змінюється від 0 до cols - 1.
                array[i][j] = value; //Присвоєння значення value поточному елементу масиву з координатами i, j.
                System.out.print(array[i][j] + " "); //виводить значення поточного елемента масиву, додаючи пробіл між числами, щоб зробити виведення читабельним.
                value += 3; //збільшує значення змінної value на 3 для наступного елемента масиву.
            }
            System.out.println(); //після виведення всіх елементів поточного рядка масиву, цей виклик переносить курсор на новий рядок.
        }
    }
    //Закриваємо метод generateArray.

    public static void main(String[] args) { //оголошення головного методу програми. Саме з нього починається виконання програми.
        // Виклик методу для ялинки
        int levels = 6;  // Кількість рівнів ялинки
        drawCenteredTree(levels); //виклик методу drawCenteredTree, який виведе на екран центровану ялинку з 6 рівнів.

        // Виклик методу для двовимірного масиву
        int rows = 4;  // Кількість рядків
        int cols = 5;  // Кількість колонок
        generateArray(rows, cols); //виклик методу generateArray, який створить і виведе масив розміром 4x5.
    }
}
//Закриття методу main та класу Lab2.